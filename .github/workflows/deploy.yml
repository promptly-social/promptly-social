name: Deploy to GCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      docker_tag:
        description: "Docker tag to deploy (leave empty for latest from main)"
        required: false
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: promptly-backend-${{ github.event.inputs.environment }}
  APP_SA_EMAIL: promptly-app-sa-${{ github.event.inputs.environment }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        working-directory: ./backend
        run: |
          cp env.example .env
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-testing-only" >> .env
          echo "SUPABASE_URL=https://test.supabase.co" >> .env
          echo "SUPABASE_KEY=test-anon-key" >> .env
          echo "SUPABASE_SERVICE_KEY=test-service-key" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "DEBUG=True" >> .env

      - name: Run tests
        working-directory: ./backend
        run: |
          pytest -v --tb=short

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: "read"
      id-token: "write"
    outputs:
      image_tag: ${{ steps.push_image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (Keyless)
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ env.APP_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        id: build_image
        run: |
          cd backend
          DOCKER_TAG="${{ github.event.inputs.docker_tag }}"
          if [ -z "$DOCKER_TAG" ]; then
            DOCKER_TAG="main-$(git rev-parse --short HEAD)"
          fi

          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:${DOCKER_TAG} .
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:latest .
          echo "tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT

      - name: Push Docker image
        id: push_image
        run: |
          DOCKER_TAG="${{ steps.build_image.outputs.tag }}"
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:${DOCKER_TAG}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:latest
          echo "tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    permissions:
      contents: "read"
      id-token: "write"
    uses: ./.github/workflows/terraform-cloud-run.yml
    with:
      environment: ${{ github.event.inputs.environment }}
      action: "apply"
      image_tag: ${{ needs.build-and-push.outputs.image_tag }}
    secrets: inherit

  post-deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Test deployment
        run: |
          SERVICE_URL="${{ needs.deploy.outputs.service_url }}"
          if [ -z "$SERVICE_URL" ] || [ "$SERVICE_URL" = "n/a" ]; then
            echo "⚠️ No service URL available, skipping health check"
            echo "This might happen if:"
            echo "  - manage_cloud_run_service is false in terraform"
            echo "  - Cloud Run service is not deployed yet"
            echo "  - There were no changes to apply"
            exit 0
          fi

          echo "🔍 Testing deployment at: $SERVICE_URL"
          sleep 30
          curl -f "$SERVICE_URL/health" || exit 1
          echo "✅ Deployment health check passed"

      - name: Update environment info
        run: |
          echo "🚀 Successfully deployed to ${{ github.event.inputs.environment }}"
          echo "📍 Service URL: ${{ needs.deploy.outputs.service_url }}"
          echo "🏷️  Docker Tag: ${{ needs.build-and-push.outputs.image_tag }}"
          echo "💾 Database: Using Supabase (no CloudSQL needed)"
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "🔄 Minimum instances set to 1 to avoid cold starts"
          else
            echo "💰 Minimum instances set to 0 for cost optimization in staging"
          fi
