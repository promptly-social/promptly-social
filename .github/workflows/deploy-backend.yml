name: Deploy Backend to GCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      docker_tag:
        description: "Docker tag to deploy (leave empty for latest from main)"
        required: false
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: promptly-backend-${{ github.event.inputs.environment }}
  APP_SA_EMAIL: promptly-app-sa-${{ github.event.inputs.environment }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        working-directory: ./backend
        run: |
          cp env.example .env
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-testing-only" >> .env
          echo "SUPABASE_URL=https://test.supabase.co" >> .env
          echo "SUPABASE_KEY=test-anon-key" >> .env
          echo "SUPABASE_SERVICE_KEY=test-service-key" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "DEBUG=True" >> .env

      - name: Run tests
        working-directory: ./backend
        run: |
          pytest -v --tb=short

  migrate:
    runs-on: ubuntu-latest
    needs: test
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate to Google Cloud (Keyless)
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Run database migrations
        working-directory: ./backend
        env:
          CLOUD_SQL_INSTANCE_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_INSTANCE_CONNECTION_NAME }}
          CLOUD_SQL_DATABASE_NAME: ${{ secrets.CLOUD_SQL_DATABASE_NAME }}
          CLOUD_SQL_USER: ${{ secrets.CLOUD_SQL_USER }}
          CLOUD_SQL_PASSWORD: ${{ secrets.CLOUD_SQL_PASSWORD }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          AUTO_APPLY_MIGRATIONS: true
        run: |
          echo "Running database migrations for ${{ github.event.inputs.environment }}..."
          python -c "
          from app.core.migrations import migration_manager
          print('=== Checking Migration Status ===')
          status = migration_manager.get_migration_status()
          print(f'Migration Status: {status}')
          
          pending = migration_manager.check_pending_migrations()
          if pending:
              print(f'Applying {len(pending)} pending migrations: {pending}')
              result = migration_manager.apply_pending_migrations()
              if result:
                  print('✅ Migrations applied successfully!')
              else:
                  print('❌ Migration failed')
                  exit(1)
          else:
              print('✅ No pending migrations')
          "

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, migrate]
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: "read"
      id-token: "write"
    outputs:
      image_tag: ${{ steps.push_image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (Keyless)
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        id: build_image
        run: |
          cd backend
          DOCKER_TAG="${{ github.event.inputs.docker_tag }}"
          if [ -z "$DOCKER_TAG" ]; then
            DOCKER_TAG="main-$(git rev-parse --short HEAD)"
          fi

          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:${DOCKER_TAG} .
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:latest .
          echo "tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT

      - name: Push Docker image
        id: push_image
        run: |
          DOCKER_TAG="${{ steps.build_image.outputs.tag }}"
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:${DOCKER_TAG}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/promptly-backend/backend:latest
          echo "tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    permissions:
      contents: "read"
      id-token: "write"
    uses: ./.github/workflows/terraform-cloud-run.yml
    with:
      environment: ${{ github.event.inputs.environment }}
      image_tag: ${{ needs.build-and-push.outputs.image_tag }}
    secrets: inherit
