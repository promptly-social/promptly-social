name: Main - Build and Test

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/main.yml"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        working-directory: ./backend
        run: |
          cp env.example .env
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-testing-only" >> .env
          echo "SUPABASE_URL=https://test.supabase.co" >> .env
          echo "SUPABASE_KEY=test-anon-key" >> .env
          echo "SUPABASE_SERVICE_KEY=test-service-key" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "DEBUG=True" >> .env

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          pytest -v --tb=short --cov=app --cov-report=term-missing --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./backend/htmlcov/

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t backend-test:latest .

      - name: Test Docker image
        working-directory: ./backend
        run: |
          # Run a quick test to ensure the container starts
          docker run --rm -d --name test-container -p 8001:8000 backend-test:latest
          sleep 10
          # Test health endpoint (assuming you have one)
          curl -f http://localhost:8001/health || (docker logs test-container && exit 1)
          docker stop test-container

  notify:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ Backend build and test completed successfully on main branch"
          echo "✔️ Docker image build succeeded"

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Backend build or test failed on main branch"
          exit 1
