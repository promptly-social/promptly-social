name: Deploy Frontend to GCS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: "read"
      id-token: "write"

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
      ENV_NAME: ${{ github.event.inputs.environment }}
      GCP_TERRAFORM_SA_EMAIL: ${{ secrets.GCP_TERRAFORM_SA_EMAIL }}
      BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
      VITE_API_URL: ${{ secrets.VITE_API_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Environment Info
        run: |
          echo "Deploying to $ENV_NAME environment (bucket: $BUCKET_NAME)"

      - name: Authenticate to Google Cloud (Keyless)
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_TERRAFORM_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Create .env file for frontend
        working-directory: ./frontend
        run: |
          echo "VITE_NODE_ENV=$ENV_NAME" > .env
          echo "VITE_API_URL=$VITE_API_URL" >> .env
          echo "Created .env file for $ENV_NAME environment:"
          cat .env

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install and Build Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Deploy to GCS
        run: |
          echo "Syncing build artifacts to gs://$BUCKET_NAME"
          gcloud storage rsync ./frontend/dist gs://$BUCKET_NAME --recursive --delete-unmatched-destination-objects

      - name: Invalidate CDN Cache
        run: |
          # This command ensures that users get the latest version of the site
          # by invalidating the CDN cache for all updated files.
          echo "Invalidating CDN cache for $BUCKET_NAME"
          gcloud compute url-maps invalidate-cdn-cache promptly-frontend-url-map-$ENV_NAME --path "/*" --host "$BUCKET_NAME" --project $PROJECT_ID
