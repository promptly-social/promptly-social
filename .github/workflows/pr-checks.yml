name: PR Checks - Build and Test

on:
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        python-version: [3.11]

    # No PostgreSQL service needed - using Supabase

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        working-directory: ./backend
        run: |
          cp env.example .env
          # Override with test values - no DATABASE_URL needed (using Supabase)
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-testing-only" >> .env
          echo "SUPABASE_URL=https://test.supabase.co" >> .env
          echo "SUPABASE_KEY=test-anon-key" >> .env
          echo "SUPABASE_SERVICE_KEY=test-service-key" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "DEBUG=True" >> .env

      - name: Run linting
        working-directory: ./backend
        run: |
          pip install flake8 black isort
          # Check code formatting
          black --check .
          # Check import sorting
          isort --check-only .
          # Run linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        working-directory: ./backend
        run: |
          pytest -v --tb=short --cov=app --cov-report=term-missing --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t backend-test:latest .

      - name: Test Docker image
        working-directory: ./backend
        run: |
          # Run a quick test to ensure the container starts
          docker run --rm -d --name test-container -p 8001:8000 backend-test:latest
          sleep 10
          # Test health endpoint (assuming you have one)
          curl -f http://localhost:8001/health || (docker logs test-container && exit 1)
          docker stop test-container

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "./backend"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Add SCW Training to Trivy results
        uses: SecureCodeWarrior/github-action-add-sarif-contextual-training@v1
        with:
          inputSarifFile: "trivy-results.sarif"
          outputSarifFile: "trivy-results.processed.sarif"
        continue-on-error: true

      - name: Upload enriched Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.processed.sarif"
