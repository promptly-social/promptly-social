name: PR Checks - Build and Test

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  actions: read
  id-token: write # For Codecov

jobs:
  test:
    runs-on: ubuntu-latest
    # permissions are inherited from the top level
    strategy:
      matrix:
        python-version: [3.13]

    # No PostgreSQL service needed - using Supabase

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        working-directory: ./backend
        run: |
          cp env.example .env
          # Override with test values - no DATABASE_URL needed (using Supabase)
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-testing-only" >> .env
          echo "SUPABASE_URL=https://test.supabase.co" >> .env
          echo "SUPABASE_KEY=test-anon-key" >> .env
          echo "SUPABASE_SERVICE_KEY=test-service-key" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "DEBUG=True" >> .env
          echo "OPENROUTER_API_KEY=test-openrouter-api-key" >> .env
          echo "OPENROUTER_LARGE_MODEL_PRIMARY=google/gemini-2.0-flash-001" >> .env
          echo "OPENROUTER_LARGE_MODELS_FALLBACK=google/gemini-2.0-flash-001" >> .env
          echo "OPENROUTER_LARGE_MODEL_TEMPERATURE=0.7" >> .env

      - name: Run linting
        working-directory: ./backend
        run: |
          pip install flake8 black isort
          # Check code formatting
          black --check .
          # Run linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        working-directory: ./backend
        run: |
          pytest -v --tb=short --cov=app --cov-report=term-missing --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t backend-test:latest .

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install and Build Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
