name: Terraform Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (staging/production)"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      action:
        description: "Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - plan
          - apply
          - destroy
      auto_approve:
        description: "Auto approve terraform apply"
        required: false
        default: true
        type: boolean

env:
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ secrets.GCP_REGION }}
  TF_VAR_environment: ${{ github.event.inputs.environment || 'staging' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  terraform:
    name: "Terraform Infrastructure (${{ github.event.inputs.environment || 'staging' }})"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    permissions:
      contents: read
      id-token: write

    defaults:
      run:
        working-directory: ./terraform/environments/infrastructure/${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Authenticate to Google Cloud (Keyless)
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Create terraform.tfvars
        run: |
          # Copy from environment-specific template
          cp terraform.tfvars terraform.tfvars.auto

          # Override with GitHub secrets
          sed -i.bak "s/your-gcp-project-id/${{ secrets.GCP_PROJECT_ID }}/" terraform.tfvars.auto
          sed -i.bak "s/us-central1/${{ secrets.GCP_REGION }}/" terraform.tfvars.auto

          # Add CORS origins
          echo 'cors_origins = ["${{ secrets.FRONTEND_URL }}"]' >> terraform.tfvars.auto

          rm terraform.tfvars.auto.bak

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "plan_exitcode=$?" >> $GITHUB_OUTPUT

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Environment: \`${{ github.event.inputs.environment }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply' && (github.event.inputs.auto_approve == 'true' || steps.plan.outputs.plan_exitcode == '2')
        run: terraform apply tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform plan -destroy -out=destroy_plan
          if [ "${{ github.event.inputs.auto_approve }}" == "true" ]; then
            terraform apply destroy_plan
          else
            echo "Destroy plan created. Run with auto_approve=true to execute."
          fi

      - name: Output Terraform Values
        if: github.event.inputs.action == 'apply' || github.event.inputs.action == 'plan'
        run: |
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Update secrets after apply
        if: github.event.inputs.action == 'apply'
        run: |
          echo "ðŸ”„ Remember to update the following secrets in Secret Manager:"
          echo "- JWT_SECRET_KEY"
          echo "- SUPABASE_URL"
          echo "- SUPABASE_KEY"
          echo "- SUPABASE_SERVICE_KEY"
          echo "- GOOGLE_CLIENT_ID"
          echo "- GOOGLE_CLIENT_SECRET"
          echo "- GCP_ANALYSIS_FUNCTION_URL"
          echo ""
          echo "âœ… Using Supabase for database - no CloudSQL configuration needed."
