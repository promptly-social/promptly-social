name: Backend Main - Build and Test

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-main.yml"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test environment
        working-directory: ./backend
        run: |
          cp env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_promptly" >> .env
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-testing-only" >> .env
          echo "SUPABASE_URL=https://test.supabase.co" >> .env
          echo "SUPABASE_KEY=test-anon-key" >> .env
          echo "SUPABASE_SERVICE_KEY=test-service-key" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "DEBUG=True" >> .env

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          pytest -v --tb=short --cov=app --cov-report=term-missing --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Archive coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./backend/htmlcov/

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: "read"
      id-token: "write"

    env:
      APP_SA_EMAIL: promptly-app-sa-production@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (Keyless)
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ env.APP_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/promptly-backend/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: always()
    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.build-and-push.result == 'success'
        run: |
          echo "‚úÖ Backend build and test completed successfully on main branch"
          echo "üê≥ Docker image pushed to Google Artifact Registry"

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.build-and-push.result == 'failure'
        run: |
          echo "‚ùå Backend build or test failed on main branch"
          exit 1
