import os
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field
from pydantic_ai.models.openai import OpenAIModel, OpenAIModelSettings
from pydantic_ai.providers.openrouter import OpenRouterProvider
from pydantic_ai import Agent


class FilteredArticlesResult(BaseModel):
    """Schema for the filtered articles result."""

    ids: List[str] = Field(description="A list of article ids.")


class GeneratedPost(BaseModel):
    """Schema for the post generated by the AI agent."""

    linkedin_post: str = Field(description="The generated LinkedIn post content.")
    topics: List[str] = Field(
        description="A list of relevant topics for the post: Education, Story-telling, Analysis, Validation, and/or Promotion."
    )


class PostsGenerator:
    def __init__(self):
        self.openrouter_api_key = os.getenv("OPENROUTER_API_KEY")

        # Get large model configuration from environment variables for posts generation
        self.large_model_primary = os.getenv(
            "OPENROUTER_LARGE_MODEL_PRIMARY", "google/gemini-2.5-pro"
        )
        large_models_fallback_str = os.getenv(
            "OPENROUTER_LARGE_MODELS_FALLBACK", "deepseek/deepseek-r1-0528"
        )
        self.large_models_fallback = [
            model.strip() for model in large_models_fallback_str.split(",")
        ]
        self.large_model_temperature = float(
            os.getenv("OPENROUTER_LARGE_MODEL_TEMPERATURE", "0.0")
        )

        self.model_primary = os.getenv(
            "OPENROUTER_MODEL_PRIMARY", "google/gemini-2.5-flash"
        )
        models_fallback_str = os.getenv(
            "OPENROUTER_MODELS_FALLBACK", "deepseek/deepseek-r1-0528"
        )
        self.models_fallback = [
            model.strip() for model in models_fallback_str.split(",")
        ]
        self.model_temperature = float(os.getenv("OPENROUTER_MODEL_TEMPERATURE", "0.0"))

    async def filter_articles(
        self,
        candidate_posts: List[Dict[str, Any]],
        bio: str,
        topics_of_interest: List[str],
        number_of_posts_to_generate: int,
    ) -> List[FilteredArticlesResult]:
        """
        Filter the articles based on the user's bio, writing style, and topics of interest.
        """

        print(f"{len(candidate_posts)} candidate posts are being filtered.")

        # Convert UUIDs to strings for LLM prompt
        candidate_posts_serializable = []
        for post in candidate_posts:
            post_copy = post.copy()
            if "id" in post_copy and hasattr(post_copy["id"], "__str__"):
                post_copy["id"] = str(post_copy["id"])
            candidate_posts_serializable.append(post_copy)

        prompt = f"""You are an expert Content Strategist who helps thought leaders find compelling articles to use as inspiration for creating engaging LinkedIn posts. Your goal is to select articles that will spark discussion, showcase expertise, and resonate with a professional audience.

**User Profile:**
- **Bio:** {bio}
- **Topics of Interest:** {topics_of_interest}

For the purpose of *selecting* articles, focus on the article's **content and substance**, not its writing style. The user's writing style will be applied when the post is generated later.

**Candidate Articles:**
You will be given a list of articles, each with a title, subtitle, and URL. Some could be missing.
{candidate_posts}

**Your Task:**
From the list of candidate articles, select UP TO {number_of_posts_to_generate} that are BEST suited for creating high-engagement LinkedIn posts.

**Selection Criteria (What to look for):**
- **Thought-Provoking Content:** Does the article present a strong opinion, a unique perspective, or deep analysis? Does it challenge common wisdom?
- **Conversation Starter:** Can the user add their own experience or opinion to it easily? Will it encourage comments and debate?
- **Relevance to User's Expertise:** Does it align with the user's bio and topics of interest, positioning them as an expert?
- **Broader Appeal:** Does it discuss a trend, a strategy, or a timeless concept rather than being a niche product update?

**What to AVOID (Very Important):**
- **Software Updates & Product Announcements:** Do not select articles that are just about a new version release, a new feature, or a product launch. These are generally poor for engagement. For example, avoid titles like "Announcing Product X v2.4".
- **Simple News Reports or Press Releases:** Avoid articles that just state facts without providing analysis or opinion. For example, avoid "Company ABC Acquires Company XYZ".
- **Hiring Announcements or Company-specific News:** Avoid articles that are only relevant to one company's internal affairs.

**Instructions:**
1. Carefully analyze each article in the provided list against the criteria above.
2. Consider how the content could be turned into a compelling LinkedIn post by the user.
3. Select the top {number_of_posts_to_generate} articles.
4. Return ONLY a JSON object containing the IDs of your selected articles, like this:
{{"ids": ["id1", "id2", "id3"]}}
"""

        model = OpenAIModel(
            self.model_primary,
            provider=OpenRouterProvider(
                api_key=self.openrouter_api_key,
            ),
        )

        agent = Agent(
            model,
            output_type=FilteredArticlesResult,
            model_settings=OpenAIModelSettings(
                temperature=self.model_temperature,
                extra_body={"models": self.models_fallback},
            ),
            system_prompt="",
        )

        result = await agent.run(prompt)
        filtered_articles_result = result.output

        ids = filtered_articles_result.ids

        print(f"{len(ids)} articles were selected: {ids}")

        if len(ids) == 0:
            print(
                "No articles were found that match the user's bio, writing style, and topics of interest."
            )
            return []

        filtered_articles = []
        for id in ids:
            for post in candidate_posts_serializable:
                if post.get("id") == id:
                    filtered_articles.append(post)
                    break

        if len(filtered_articles) < number_of_posts_to_generate:
            print(
                f"{len(filtered_articles)} articles were found that match the user's bio, writing style, and topics of interest."
            )

        return filtered_articles

    async def generate_post(
        self,
        idea_content: str,
        bio: Optional[str],
        writing_style: Optional[str],
        linkedin_post_strategy: Optional[str],
    ) -> GeneratedPost:
        """
        Generates a LinkedIn post using the AI agent.
        """

        prompt = f"""You are a world-class LinkedIn Ghostwriter and Content Strategist. Your expertise is in taking a piece of source material (like an article) and transforming it into a compelling, authentic-sounding LinkedIn post that drives engagement and positions the user as a thought leader.

**Context for this Task:**

1.  **Source Material (Content Idea):**
    ---
    {idea_content}
    ---
    This is the core content you will base the post on.

2.  **Author's Profile:**
    -   **Bio:** {bio}
    -   **Writing Style:** {writing_style}

3.  **Specific Post Instructions:**
    -   **LinkedIn Post Strategy:** {linkedin_post_strategy}
    This is a specific directive on the tone, angle, or goal for this particular post. You must follow it closely.

**Your Task & Thought Process:**

1.  **Deconstruct the Source:** Read the `Source Material` and identify its single most important takeaway or a surprising insight. Don't just summarize.
2.  **Connect to the Author:** How can this key takeaway be framed from the author's perspective, using their `Bio` and expertise? How can they add a personal story or a strong opinion to it?
3.  **Draft the Post:** Write the post following the `LinkedIn Post Strategy` and mimicking the author's `Writing Style`.

**LinkedIn Post Best Practices to Apply:**

-   **Start with a powerful hook:** Grab the reader's attention in the first sentence.
-   **Provide a unique take:** Don't just regurgitate the article. Add the user's opinion, analysis, or a personal anecdote. This is crucial. Avoid being too broad.
-   **Be human and authentic:** Write in a conversational tone. Use "I" statements. Use the user's writing style.
-   **End with a question:** Encourage comments by asking your audience for their opinion or experiences.
-   **Structure for readability:** Use short paragraphs and white space.

**VERY IMPORTANT - Formatting and Content Rules:**

-   **Plain Text Only:** The entire post must be plain text. Do NOT use any Markdown formatting (like `*bold*`, `_italics_`, or `- lists`).
-   **No AI- giveaways:** Avoid generic phrases, emojis, or special characters (like em-dashes or arrows) that scream "AI-generated".
-   **Do Not make up personal anecdotes:** The post must be based on the source material. Do not fabricate personal anecdotes or experiences if not provided in the user's bio.
-   **No Source Link:** Do NOT include the link to the original article in the post.
-   **Topics, not Hashtags:** Identify one relevant topic for the post. Your options are: Education, Story-telling, Analysis, Validation, and/or Promotion. DO NOT format them as #hashtags.

Finally, return the generated post and the topics in the required JSON format.
"""

        model = OpenAIModel(
            self.large_model_primary,
            provider=OpenRouterProvider(
                api_key=self.openrouter_api_key,
            ),
        )

        agent = Agent(
            model,
            output_type=GeneratedPost,
            model_settings=OpenAIModelSettings(
                temperature=self.large_model_temperature,
                extra_body={"models": self.large_models_fallback},
            ),
            system_prompt="",
        )

        result = await agent.run(prompt)
        return result.output
