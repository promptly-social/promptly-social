import os
from typing import Any, Dict, List, Optional
from datetime import datetime

from openai import OpenAI
from supabase import Client
from helper import extract_json_from_llm_response
from pydantic import BaseModel, Field


class GeneratedPost(BaseModel):
    """Schema for the post generated by the AI agent."""

    linkedin_post: str = Field(description="The generated LinkedIn post content.")
    topics: List[str] = Field(description="A list of relevant topics for the post.")
    source_url: Optional[str] = Field(description="The URL of the source of the post.")
    recommendation_score: int = Field(
        description="Recommendation score from 0 to 100.", ge=0, le=100
    )


class PostsGenerator:
    def __init__(self, supabase_client: Client, openrouter_api_key: str):
        self.supabase_client = supabase_client
        self.openrouter_client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=openrouter_api_key,
        )
        # Get large model configuration from environment variables for posts generation
        self.model_primary = os.getenv(
            "OPENROUTER_LARGE_MODEL_PRIMARY", "google/gemini-2.5-pro"
        )
        models_fallback_str = os.getenv(
            "OPENROUTER_LARGE_MODELS_FALLBACK", "deepseek/deepseek-r1-0528"
        )
        self.models_fallback = [
            model.strip() for model in models_fallback_str.split(",")
        ]
        self.temperature = float(os.getenv("OPENROUTER_LARGE_MODEL_TEMPERATURE", "0.0"))

    def generate_posts_from_articles(
        self,
        user_id: str,
        candidate_posts: List[Dict[str, Any]],
        bio: str,
        writing_style: str,
        topics_of_interest: List[str],
        number_of_posts_to_generate: int,
        linkedin_post_strategy: str,
    ) -> List[Dict[str, Any]]:
        """
        Generate posts for the user.
        """

        urls = [post["url"] for post in candidate_posts if post.get("url")]

        today = datetime.now().strftime("%Y-%m-%d")

        prompt = f"""
        You are an expert at generating posts for LinkedIn to gain the most engagement using the user's bio, writing style, and topics of interest.
        You are given a list of URLs of the blog posts or news articles.
        Do not include special characters in the posts that people suspect that you are using AI to generate, such as em-dash, arrows, etc.
        You are to generate {number_of_posts_to_generate} LinkedIn appropriate posts for the user to pick from and post on LinkedIn.
        The posts should be linkedin appropriate and gain the most engagement, and it should be plain text without any markdown.
        Make sure to cite the source of the post in the post, but do not include the link to the source in the post.
        Generate a recommendation score for the post between 0 and 100, where 100 is the most recommended and 0 is the least recommended.
        The user's bio is: {bio}
        The user's writing style is: {writing_style}
        The user's topics of interest are: {topics_of_interest}
        The post URLs are: {urls}
        The linkedin post strategy for gettting the most engagement is: {linkedin_post_strategy}
        Today's date is: {today}
        Return the posts in a JSON format with the following fields: 
        {{"linkedin_post": "your generated post", "post_url": "the url of the article that you used to generate the post", "topics": ["topic1", "topic2", "topic3"], "recommendation_score": 0-100}}
        """
        response = self.openrouter_client.chat.completions.create(
            model=self.model_primary,
            extra_body={
                "models": self.models_fallback,
            },
            messages=[{"role": "user", "content": prompt}],
            temperature=self.temperature,
        )

        return extract_json_from_llm_response(response.choices[0].message.content)

    async def generate_post(
        self,
        idea_content: str,
        bio: Optional[str],
        writing_style: Optional[str],
        linkedin_post_strategy: Optional[str],
    ) -> GeneratedPost:
        """
        Generates a LinkedIn post using the AI agent.
        """

        prompt = f"""
        You are an expert at generating posts for LinkedIn to gain the most engagement.
        Your task is to create a LinkedIn post based on the provided content idea and user profile information.

        Content Idea:
        ---
        {idea_content}
        ---

        User Profile:
        - Bio: {bio}
        - Writing Style: {writing_style}
        - LinkedIn Post Strategy: {linkedin_post_strategy}

        Instructions:
        1. Generate a LinkedIn-appropriate post that is engaging and likely to get high engagement.
        2. The post should be plain text, without any markdown or special characters like em-dashes or arrows that might suggest AI generation.
        3. If the content idea is a URL, incorporate the link into the post naturally.
        4. Create a recommendation score for the post between 0 and 100, where 100 is the most recommended.
        5. Identify a list of relevant topics or hashtags for the post.

        Return the generated post in the required JSON format.
        """

        result = await self.agent.run(prompt)
        return result.output
