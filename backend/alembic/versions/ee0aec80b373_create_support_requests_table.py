"""create_support_requests_table

Revision ID: ee0aec80b373
Revises: b35433ad74cb
Create Date: 2025-07-22 10:27:12.416962

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import app.models.helpers

# revision identifiers, used by Alembic.
revision: str = "ee0aec80b373"
down_revision: Union[str, None] = "b35433ad74cb"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("migration_lock")
    op.alter_column(
        "content_strategies",
        "platform",
        existing_type=sa.TEXT(),
        type_=sa.String(length=50),
        existing_nullable=False,
    )
    op.drop_constraint(
        "content_strategies_user_platform_unique", "content_strategies", type_="unique"
    )
    op.drop_index("idx_content_strategies_platform", table_name="content_strategies")
    op.drop_index("idx_content_strategies_user_id", table_name="content_strategies")
    op.alter_column(
        "conversations",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "conversations",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_conversations_created_at", table_name="conversations")
    op.drop_index("idx_conversations_idea_bank_id", table_name="conversations")
    op.drop_index("idx_conversations_post_id", table_name="conversations")
    op.drop_index("idx_conversations_status", table_name="conversations")
    op.drop_index("idx_conversations_user_id", table_name="conversations")
    op.drop_index("idx_conversations_user_idea_created", table_name="conversations")
    op.alter_column(
        "daily_suggestion_schedules",
        "cron_expression",
        existing_type=sa.TEXT(),
        type_=sa.String(length=100),
        existing_nullable=False,
    )
    op.alter_column(
        "daily_suggestion_schedules",
        "timezone",
        existing_type=sa.TEXT(),
        type_=sa.String(length=50),
        existing_nullable=False,
        existing_server_default=sa.text("'UTC'::text"),
    )
    op.drop_constraint(
        "daily_suggestion_schedules_user_unique",
        "daily_suggestion_schedules",
        type_="unique",
    )
    op.create_unique_constraint(
        op.f("uq_daily_suggestion_schedules_user_id"),
        "daily_suggestion_schedules",
        ["user_id"],
    )
    op.drop_index(
        "idx_idea_banks_data", table_name="idea_banks", postgresql_using="gin"
    )
    op.drop_index("idx_idea_banks_user_id", table_name="idea_banks")
    op.drop_constraint("fk_idea_banks_user_id_users", "idea_banks", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_idea_banks_user_id_users"), "idea_banks", "users", ["user_id"], ["id"]
    )
    op.alter_column(
        "messages",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_messages_conversation_created", table_name="messages")
    op.drop_index("idx_messages_conversation_id", table_name="messages")
    op.drop_index("idx_messages_created_at", table_name="messages")
    op.drop_index("idx_messages_role", table_name="messages")
    op.alter_column(
        "post_media",
        "media_type",
        existing_type=sa.TEXT(),
        type_=sa.String(length=20),
        existing_nullable=True,
    )
    op.alter_column(
        "post_media",
        "file_name",
        existing_type=sa.TEXT(),
        type_=sa.String(length=255),
        existing_nullable=True,
    )
    op.drop_index("idx_post_media_post_id", table_name="post_media")
    op.drop_index("idx_post_media_user_id", table_name="post_media")
    op.alter_column(
        "posts",
        "title",
        existing_type=sa.TEXT(),
        type_=sa.String(length=500),
        existing_nullable=True,
    )
    op.alter_column(
        "posts",
        "platform",
        existing_type=sa.TEXT(),
        type_=sa.String(length=50),
        existing_nullable=False,
        existing_server_default=sa.text("'linkedin'::text"),
    )
    op.alter_column(
        "posts",
        "topics",
        existing_type=postgresql.ARRAY(sa.TEXT()),
        type_=app.models.helpers.StringArray(),
        nullable=False,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.alter_column(
        "posts",
        "status",
        existing_type=sa.TEXT(),
        type_=sa.String(length=20),
        nullable=False,
        existing_server_default=sa.text("'suggested'::text"),
    )
    op.drop_index("idx_posts_idea_bank_id", table_name="posts")
    op.drop_index(
        "idx_posts_linkedin_post_id",
        table_name="posts",
        postgresql_where="(linkedin_post_id IS NOT NULL)",
    )
    op.drop_index("idx_posts_platform", table_name="posts")
    op.drop_index("idx_posts_recommendation_score", table_name="posts")
    op.drop_index(
        "idx_posts_scheduled_at",
        table_name="posts",
        postgresql_where="(scheduled_at IS NOT NULL)",
    )
    op.drop_index(
        "idx_posts_scheduled_pending",
        table_name="posts",
        postgresql_where="((scheduled_at IS NOT NULL) AND (status = 'scheduled'::text))",
    )
    op.drop_index(
        "idx_posts_scheduler_job_name",
        table_name="posts",
        postgresql_where="(scheduler_job_name IS NOT NULL)",
    )
    op.drop_index(
        "idx_posts_status_scheduled_at",
        table_name="posts",
        postgresql_where="(scheduled_at IS NOT NULL)",
    )
    op.drop_index("idx_posts_topics", table_name="posts", postgresql_using="gin")
    op.drop_index("idx_posts_updated_at", table_name="posts")
    op.drop_index("idx_posts_user_created_status", table_name="posts")
    op.drop_index(
        "idx_posts_user_feedback",
        table_name="posts",
        postgresql_where="(user_feedback IS NOT NULL)",
    )
    op.drop_index("idx_posts_user_feedback_at", table_name="posts")
    op.drop_index("idx_posts_user_id", table_name="posts")
    op.drop_index("idx_posts_user_scheduled_at", table_name="posts")
    op.drop_column("posts", "recommendation_score")
    op.alter_column(
        "social_connections",
        "platform",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=False,
    )
    op.alter_column(
        "social_connections",
        "platform_username",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.drop_constraint(
        "uq_social_connections_user_id", "social_connections", type_="unique"
    )
    op.drop_index(
        "idx_user_analysis_tracking_last_analysis", table_name="user_analysis_tracking"
    )
    op.drop_index(
        "idx_user_analysis_tracking_user_id", table_name="user_analysis_tracking"
    )
    op.drop_constraint(
        "uq_user_analysis_tracking_user_id", "user_analysis_tracking", type_="unique"
    )
    op.create_index(
        op.f("ix_user_analysis_tracking_last_analysis_at"),
        "user_analysis_tracking",
        ["last_analysis_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_analysis_tracking_user_id"),
        "user_analysis_tracking",
        ["user_id"],
        unique=True,
    )
    op.drop_index("idx_user_onboarding_status", table_name="user_onboarding")
    op.drop_index("idx_user_onboarding_user_id", table_name="user_onboarding")
    op.drop_constraint("uq_user_onboarding_user_id", "user_onboarding", type_="unique")
    op.create_index(
        op.f("ix_user_onboarding_user_id"), "user_onboarding", ["user_id"], unique=True
    )
    op.alter_column(
        "user_preferences",
        "topics_of_interest",
        existing_type=postgresql.ARRAY(sa.TEXT()),
        type_=app.models.helpers.StringArray(),
        nullable=False,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.alter_column(
        "user_preferences",
        "websites",
        existing_type=postgresql.ARRAY(sa.TEXT()),
        type_=app.models.helpers.StringArray(),
        nullable=False,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.alter_column(
        "user_preferences",
        "substacks",
        existing_type=postgresql.ARRAY(sa.TEXT()),
        type_=app.models.helpers.StringArray(),
        existing_nullable=False,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.alter_column(
        "writing_style_analysis",
        "analysis_data",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=False,
        existing_server_default=sa.text("''::text"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "writing_style_analysis",
        "analysis_data",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=False,
        existing_server_default=sa.text("''::text"),
    )
    op.alter_column(
        "user_preferences",
        "substacks",
        existing_type=app.models.helpers.StringArray(),
        type_=postgresql.ARRAY(sa.TEXT()),
        existing_nullable=False,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.alter_column(
        "user_preferences",
        "websites",
        existing_type=app.models.helpers.StringArray(),
        type_=postgresql.ARRAY(sa.TEXT()),
        nullable=True,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.alter_column(
        "user_preferences",
        "topics_of_interest",
        existing_type=app.models.helpers.StringArray(),
        type_=postgresql.ARRAY(sa.TEXT()),
        nullable=True,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.drop_index(op.f("ix_user_onboarding_user_id"), table_name="user_onboarding")
    op.create_unique_constraint(
        "uq_user_onboarding_user_id", "user_onboarding", ["user_id"]
    )
    op.create_index(
        "idx_user_onboarding_user_id", "user_onboarding", ["user_id"], unique=False
    )
    op.create_index(
        "idx_user_onboarding_status",
        "user_onboarding",
        ["is_completed", "is_skipped"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_user_analysis_tracking_user_id"), table_name="user_analysis_tracking"
    )
    op.drop_index(
        op.f("ix_user_analysis_tracking_last_analysis_at"),
        table_name="user_analysis_tracking",
    )
    op.create_unique_constraint(
        "uq_user_analysis_tracking_user_id", "user_analysis_tracking", ["user_id"]
    )
    op.create_index(
        "idx_user_analysis_tracking_user_id",
        "user_analysis_tracking",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_user_analysis_tracking_last_analysis",
        "user_analysis_tracking",
        ["last_analysis_at"],
        unique=False,
    )
    op.create_unique_constraint(
        "uq_social_connections_user_id", "social_connections", ["user_id", "platform"]
    )
    op.alter_column(
        "social_connections",
        "platform_username",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "social_connections",
        "platform",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.add_column(
        "posts",
        sa.Column(
            "recommendation_score",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_index(
        "idx_posts_user_scheduled_at",
        "posts",
        ["user_id", "scheduled_at"],
        unique=False,
    )
    op.create_index("idx_posts_user_id", "posts", ["user_id"], unique=False)
    op.create_index(
        "idx_posts_user_feedback_at", "posts", ["user_id", "feedback_at"], unique=False
    )
    op.create_index(
        "idx_posts_user_feedback",
        "posts",
        ["user_feedback"],
        unique=False,
        postgresql_where="(user_feedback IS NOT NULL)",
    )
    op.create_index(
        "idx_posts_user_created_status",
        "posts",
        ["user_id", "created_at", "status"],
        unique=False,
    )
    op.create_index(
        "idx_posts_updated_at", "posts", [sa.text("updated_at DESC")], unique=False
    )
    op.create_index(
        "idx_posts_topics", "posts", ["topics"], unique=False, postgresql_using="gin"
    )
    op.create_index(
        "idx_posts_status_scheduled_at",
        "posts",
        ["status", "scheduled_at"],
        unique=False,
        postgresql_where="(scheduled_at IS NOT NULL)",
    )
    op.create_index(
        "idx_posts_scheduler_job_name",
        "posts",
        ["scheduler_job_name"],
        unique=False,
        postgresql_where="(scheduler_job_name IS NOT NULL)",
    )
    op.create_index(
        "idx_posts_scheduled_pending",
        "posts",
        ["scheduled_at", "status"],
        unique=False,
        postgresql_where="((scheduled_at IS NOT NULL) AND (status = 'scheduled'::text))",
    )
    op.create_index(
        "idx_posts_scheduled_at",
        "posts",
        ["scheduled_at"],
        unique=False,
        postgresql_where="(scheduled_at IS NOT NULL)",
    )
    op.create_index(
        "idx_posts_recommendation_score",
        "posts",
        [sa.text("recommendation_score DESC")],
        unique=False,
    )
    op.create_index("idx_posts_platform", "posts", ["platform"], unique=False)
    op.create_index(
        "idx_posts_linkedin_post_id",
        "posts",
        ["linkedin_post_id"],
        unique=False,
        postgresql_where="(linkedin_post_id IS NOT NULL)",
    )
    op.create_index("idx_posts_idea_bank_id", "posts", ["idea_bank_id"], unique=False)
    op.alter_column(
        "posts",
        "status",
        existing_type=sa.String(length=20),
        type_=sa.TEXT(),
        nullable=True,
        existing_server_default=sa.text("'suggested'::text"),
    )
    op.alter_column(
        "posts",
        "topics",
        existing_type=app.models.helpers.StringArray(),
        type_=postgresql.ARRAY(sa.TEXT()),
        nullable=True,
        existing_server_default=sa.text("'{}'::text[]"),
    )
    op.alter_column(
        "posts",
        "platform",
        existing_type=sa.String(length=50),
        type_=sa.TEXT(),
        existing_nullable=False,
        existing_server_default=sa.text("'linkedin'::text"),
    )
    op.alter_column(
        "posts",
        "title",
        existing_type=sa.String(length=500),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.create_index("idx_post_media_user_id", "post_media", ["user_id"], unique=False)
    op.create_index("idx_post_media_post_id", "post_media", ["post_id"], unique=False)
    op.alter_column(
        "post_media",
        "file_name",
        existing_type=sa.String(length=255),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "post_media",
        "media_type",
        existing_type=sa.String(length=20),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.create_index("idx_messages_role", "messages", ["role"], unique=False)
    op.create_index("idx_messages_created_at", "messages", ["created_at"], unique=False)
    op.create_index(
        "idx_messages_conversation_id", "messages", ["conversation_id"], unique=False
    )
    op.create_index(
        "idx_messages_conversation_created",
        "messages",
        ["conversation_id", "created_at"],
        unique=False,
    )
    op.alter_column(
        "messages",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(
        op.f("fk_idea_banks_user_id_users"), "idea_banks", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_idea_banks_user_id_users",
        "idea_banks",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index("idx_idea_banks_user_id", "idea_banks", ["user_id"], unique=False)
    op.create_index(
        "idx_idea_banks_data",
        "idea_banks",
        ["data"],
        unique=False,
        postgresql_using="gin",
    )
    op.drop_constraint(
        op.f("uq_daily_suggestion_schedules_user_id"),
        "daily_suggestion_schedules",
        type_="unique",
    )
    op.create_unique_constraint(
        "daily_suggestion_schedules_user_unique",
        "daily_suggestion_schedules",
        ["user_id"],
    )
    op.alter_column(
        "daily_suggestion_schedules",
        "timezone",
        existing_type=sa.String(length=50),
        type_=sa.TEXT(),
        existing_nullable=False,
        existing_server_default=sa.text("'UTC'::text"),
    )
    op.alter_column(
        "daily_suggestion_schedules",
        "cron_expression",
        existing_type=sa.String(length=100),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.create_index(
        "idx_conversations_user_idea_created",
        "conversations",
        ["user_id", "idea_bank_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_conversations_user_id", "conversations", ["user_id"], unique=False
    )
    op.create_index(
        "idx_conversations_status", "conversations", ["status"], unique=False
    )
    op.create_index(
        "idx_conversations_post_id", "conversations", ["post_id"], unique=False
    )
    op.create_index(
        "idx_conversations_idea_bank_id",
        "conversations",
        ["idea_bank_id"],
        unique=False,
    )
    op.create_index(
        "idx_conversations_created_at", "conversations", ["created_at"], unique=False
    )
    op.alter_column(
        "conversations",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "conversations",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.create_index(
        "idx_content_strategies_user_id",
        "content_strategies",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_content_strategies_platform",
        "content_strategies",
        ["platform"],
        unique=False,
    )
    op.create_unique_constraint(
        "content_strategies_user_platform_unique",
        "content_strategies",
        ["user_id", "platform"],
    )
    op.alter_column(
        "content_strategies",
        "platform",
        existing_type=sa.String(length=50),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.create_table(
        "migration_lock",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "locked_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("locked_by", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("process_id", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="migration_lock_pkey"),
    )
    # ### end Alembic commands ###
