"""
This service uses Pydantic-AI to generate posts based on user context.
"""

from typing import List, Optional

from pydantic import BaseModel, Field
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel, OpenAIModelSettings
from pydantic_ai.providers.openrouter import OpenRouterProvider

from app.core.config import settings


class GeneratedPost(BaseModel):
    """Schema for the post generated by the AI agent."""

    linkedin_post: str = Field(description="The generated LinkedIn post content.")
    topics: List[str] = Field(description="A list of relevant topics for the post.")
    source_url: Optional[str] = Field(description="The URL of the source of the post.")
    recommendation_score: int = Field(
        description="Recommendation score from 0 to 100.", ge=0, le=100
    )


class PostGeneratorService:
    """Service to generate posts using an AI agent."""

    def __init__(self):
        fallback_models = [
            model.strip()
            for model in settings.openrouter_large_models_fallback.split(",")
            if model.strip()
        ]

        provider = OpenRouterProvider(
            api_key=settings.openrouter_api_key,
        )

        model = OpenAIModel(
            settings.openrouter_large_model_primary,
            provider=provider,
        )
        self.agent = Agent(
            model,
            output_type=GeneratedPost,
            model_settings=OpenAIModelSettings(
                temperature=settings.openrouter_large_model_temperature,
                extra_body={"models": fallback_models},
            ),
            system_prompt="",
        )

    async def generate_post(
        self,
        idea_content: str,
        bio: Optional[str],
        writing_style: Optional[str],
        linkedin_post_strategy: Optional[str],
    ) -> GeneratedPost:
        """
        Generates a LinkedIn post using the AI agent.
        """

        prompt = f"""
        You are an expert at generating posts for LinkedIn to gain the most engagement.
        Your task is to create a LinkedIn post based on the provided content idea and user profile information.

        Content Idea:
        ---
        {idea_content}
        ---

        User Profile:
        - Bio: {bio}
        - Writing Style: {writing_style}
        - LinkedIn Post Strategy: {linkedin_post_strategy}

        Instructions:
        1. Generate a LinkedIn-appropriate post that is engaging and likely to get high engagement.
        2. The post should be plain text, without any markdown or special characters like em-dashes or arrows that might suggest AI generation.
        3. If the content idea is a URL, do not include the link in the post, but cite the source of the post in the post.
        4. Create a recommendation score for the post between 0 and 100, where 100 is the most recommended.
        5. Identify a list of relevant topics or keywords for the post (no more than 5).

        Return the generated post in the required JSON format.
        """

        result = await self.agent.run(prompt)
        return result.output

    async def generate_post_for_product(
        self,
        product_name: str,
        product_description: str,
        product_url: str,
        bio: Optional[str],
        writing_style: Optional[str],
        linkedin_post_strategy: Optional[str],
    ) -> GeneratedPost:
        """
        Generates a LinkedIn post for a product.
        """

        prompt = f"""
        You are an expert at generating posts for LinkedIn to gain the most engagement.
        Your task is to create a LinkedIn post based on the provided product information.

        Product Name:
        ---
        {product_name}
        ---

        Product website:
        ---
        {product_url}
        ---

        Product Description:
        ---
        {product_description}
        ---

        User Profile:
        - Bio: {bio}
        - Writing Style: {writing_style}
        - LinkedIn Post Strategy: {linkedin_post_strategy}

        Instructions:
        1. Generate a LinkedIn post that is engaging and likely to get high engagement and get a lot of comments and reactions.
        2. The post should be plain text, without any markdown or special characters like em-dashes or arrows that might suggest AI generation.
        3. If the product website is a URL, cite the source of the post in the post, but do not include the link to the source in the post.
        4. Create a recommendation score for the post between 0 and 100, where 100 is the most recommended.
        5. Identify a list of relevant topics or keywords for the post (no more than 5).

        Return the generated post in the required JSON format.
        """

        result = await self.agent.run(prompt)
        return result.output


post_generator_service = PostGeneratorService()
