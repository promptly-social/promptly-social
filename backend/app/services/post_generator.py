"""
This service uses Pydantic-AI to generate posts based on user context.
"""

from typing import List, Optional

from pydantic import BaseModel, Field
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel, OpenAIModelSettings
from pydantic_ai.providers.openrouter import OpenRouterProvider
from pydantic_ai.tools import RunContext

from app.core.config import settings


class GeneratedPost(BaseModel):
    """Schema for the post generated by the AI agent."""

    linkedin_post: str = Field(description="The generated LinkedIn post content.")
    topics: List[str] = Field(
        description="A list of relevant topics for the post: Education, Story-telling, Analysis, Validation, and/or Promotion"
    )


class PostGeneratorService:
    """Service to generate posts using an AI agent."""

    def __init__(self):
        self.fallback_models = [
            model.strip()
            for model in settings.openrouter_large_models_fallback.split(",")
            if model.strip()
        ]

        provider = OpenRouterProvider(
            api_key=settings.openrouter_api_key,
        )

        self.model = OpenAIModel(
            settings.openrouter_large_model_primary,
            provider=provider,
        )

    async def generate_post(
        self,
        idea_content: str,
        bio: Optional[str],
        writing_style: Optional[str],
        linkedin_post_strategy: Optional[str],
        conversation_context: Optional[str] = None,
    ) -> GeneratedPost:
        """
        Generates a LinkedIn post using the AI agent.
        """

        # Guard against overly long inputs that might exceed model context window
        MAX_SECTION_LEN = 4000
        if idea_content and len(idea_content) > MAX_SECTION_LEN:
            idea_content = idea_content[:MAX_SECTION_LEN] + "... [truncated]"
        if bio and len(bio) > MAX_SECTION_LEN:
            bio = bio[:MAX_SECTION_LEN] + "... [truncated]"
        if writing_style and len(writing_style) > MAX_SECTION_LEN:
            writing_style = writing_style[:MAX_SECTION_LEN] + "... [truncated]"
        if linkedin_post_strategy and len(linkedin_post_strategy) > MAX_SECTION_LEN:
            linkedin_post_strategy = (
                linkedin_post_strategy[:MAX_SECTION_LEN] + "... [truncated]"
            )
        if conversation_context and len(conversation_context) > MAX_SECTION_LEN:
            conversation_context = (
                conversation_context[:MAX_SECTION_LEN] + "... [truncated]"
            )

        # Build the source material section
        source_material = idea_content or "No specific content idea provided."
        if conversation_context:
            source_material += f"\n\nCONVERSATION CONTEXT:\n{conversation_context}"

        prompt = f"""You are a world-class LinkedIn Ghostwriter and Content Strategist. Your expertise is in taking source material and conversation context to create compelling, authentic LinkedIn posts that drive engagement and position the user as a thought leader.

**Context for this Task:**

1.  **Source Material and Conversation Context:**
    ---
    {source_material}
    ---
    This includes the main content idea AND the conversation context with the user. Use both to understand what the user wants to convey and their personal perspective.

2.  **Author's Profile:**
    -   **Bio:** {bio}
    -   **Writing Style:** {writing_style}

3.  **Specific Post Instructions:**
    -   **LinkedIn Post Strategy:** {linkedin_post_strategy}
    This is a specific directive on the tone, angle, or goal for this particular post. You must follow it closely.

**Your Task & Thought Process:**

1.  **Understand the User's Intent**: Use the conversation context to understand:
    - The user's specific angle or perspective on the topic
    - Any personal experiences or anecdotes they've shared
    - The key message they want to convey
    - Their unique insights or takeaways

2.  **Connect to the Author**: Frame the content from the author's perspective, using their Bio and the insights from the conversation. Include personal stories or opinions they've shared.

3.  **Draft the Post**: Write the post following the LinkedIn Post Strategy, mimicking the author's Writing Style, and incorporating the conversational insights.

**LinkedIn Post Best Practices to Apply:**

-   **Use conversation insights**: If the user shared personal experiences, anecdotes, or specific perspectives in the conversation, incorporate them into the post
-   **Start with a powerful hook**: Grab the reader's attention in the first sentence
-   **Provide their unique take**: Use the conversation context to understand their specific angle or opinion
-   **Be human and authentic**: Write in a conversational tone. Use "I" statements. Use the user's writing style and any personal details they've shared
-   **End with a question**: Encourage comments by asking your audience for their opinion or experiences
-   **Structure for readability**: Use short paragraphs and white space

**VERY IMPORTANT - Formatting and Content Rules:**

-   **Plain Text Only:** The entire post must be plain text. Do NOT use any Markdown formatting (like `*bold*`, `_italics_`, or `- lists`).
-   **No AI-giveaways:** Avoid generic phrases, emojis, or special characters (like em-dashes or arrows) that scream "AI-generated".
-   **No Source Link:** Do NOT include the link to the original article in the post.
-   **Topics, not Hashtags:** Identify up to 2 relevant topics for the post. Your options are: Education, Story-telling, Analysis, Validation, and/or Promotion. DO NOT format them as #hashtags.

Finally, return the generated post and the topics in the required JSON format.
"""

        # Create a temporary agent for this generation
        agent = Agent(
            self.model,
            output_type=GeneratedPost,
            model_settings=OpenAIModelSettings(
                temperature=settings.openrouter_large_model_temperature,
                extra_body={"models": self.fallback_models},
            ),
            system_prompt="",
        )

        print("=====GENERATION TOOL===========")
        print(prompt)
        print("=====GENERATION TOOL===========")

        return await agent.run(prompt)

    async def revise_post(
        self,
        idea_content: str,
        bio: Optional[str],
        writing_style: Optional[str],
        linkedin_post_strategy: Optional[str],
        previous_draft: Optional[str] = None,
        user_feedback: Optional[str] = None,
        conversation_context: Optional[str] = None,
    ) -> GeneratedPost:
        """Revises a LinkedIn post based on user feedback."""

        # Build the source material section
        source_material = idea_content or "No specific content idea provided."
        if conversation_context:
            source_material += f"\n\nCONVERSATION CONTEXT:\n{conversation_context}"

        prompt = f"""
            You are an expert copy editor revising a LinkedIn post based on user feedback.
            Your primary goal is to follow the user's instructions precisely.

            - If the user asks for **localized changes** (e.g., "remove the hashtags", "rephrase the second sentence", "fix a typo"), apply *only* those specific edits. Do not rewrite other parts of the post.
            - If the user asks for a **rewrite** of a section or the entire post (e.g., "make this sound more professional", "rewrite this part to be a story"), then you should rewrite as requested.
            - When in doubt, prefer making minimal, targeted edits over a full rewrite to preserve the user's original voice and structure.

            The original idea for the post was:
            ---
            {source_material}
            ---

            Here is the previous draft:
            ---
            {previous_draft}
            ---

            Here is the user's feedback:
            ---
            {user_feedback}
            ---

            User Profile (for context):
            - Bio: {bio}
            - Writing Style: {writing_style}
            - LinkedIn Post Strategy: {linkedin_post_strategy}

            Instructions:
            1.  Carefully analyze the user's feedback to understand the requested changes.
            2.  Based on the feedback, decide whether to perform localized edits or a larger rewrite:
                - If the user asks for **localized changes** (e.g., "remove the hashtags," "rephrase the second sentence," "fix a typo"), apply *only* those specific edits. Do not rewrite other parts of the post.
                - If the user asks for a **rewrite** of a section or the entire post (e.g., "make this sound more professional," "rewrite this part to be a story"), then you should rewrite as requested.
                - When in doubt, prefer making minimal, targeted edits to preserve the user's original voice.
            3.  Maintain the original tone and style unless the feedback specifies a change.
            4.  The revised post should be engaging and likely to get high engagement on LinkedIn.
            5.  The post must be plain text. DO NOT use markdown or special characters (like em-dashes) that suggest AI generation.
            6.  If the content idea was a URL, cite the source within the post but do not include the URL itself.
            7.  Identify up to 2 relevant topics for the post. Your options are: Education, Story-telling, Analysis, Validation, and/or Promotion. DO NOT format them as #hashtags.

            Finally, return the generated post and the topics in the required JSON format.
            """

        # Create a temporary agent for this revision
        agent = Agent(
            self.model,
            output_type=GeneratedPost,
            model_settings=OpenAIModelSettings(
                temperature=settings.openrouter_large_model_temperature,
                extra_body={"models": self.fallback_models},
            ),
            system_prompt="",
        )

        return await agent.run(prompt)


# Singleton instance used by the tool
post_generator_service = PostGeneratorService()


async def generate_linkedin_post_tool(
    ctx: RunContext[PostGeneratorService],
    idea_content: str = Field(
        description="The content of the post idea, this is the main topic of the post."
    ),
    bio: str = Field(description="The user's biography."),
    writing_style: str = Field(description="The user's writing style."),
    linkedin_post_strategy: str = Field(
        description="The user's LinkedIn post strategy."
    ),
    conversation_context: Optional[str] = Field(
        default=None, description="The conversation history for additional context."
    ),
) -> GeneratedPost:
    """Tool wrapper for generating a LinkedIn post."""

    post = await ctx.deps.generate_post(
        idea_content=idea_content,
        bio=bio,
        writing_style=writing_style,
        linkedin_post_strategy=linkedin_post_strategy,
        conversation_context=conversation_context,
    )

    return post


async def revise_linkedin_post_tool(
    ctx: RunContext[PostGeneratorService],
    idea_content: str = Field(
        description="The content of the post idea, this is the main topic of the post."
    ),
    bio: str = Field(description="The user's biography."),
    writing_style: str = Field(description="The user's writing style."),
    linkedin_post_strategy: str = Field(
        description="The user's LinkedIn post strategy."
    ),
    previous_draft: Optional[str] = Field(
        default=None, description="The previous draft of the post to revise."
    ),
    user_feedback: Optional[str] = Field(
        default=None, description="The user's feedback on the previous draft."
    ),
    conversation_context: Optional[str] = Field(
        default=None, description="The conversation history for additional context."
    ),
) -> GeneratedPost:
    """Tool wrapper for revising a LinkedIn post."""

    post = await ctx.deps.revise_post(
        idea_content=idea_content,
        bio=bio,
        writing_style=writing_style,
        linkedin_post_strategy=linkedin_post_strategy,
        previous_draft=previous_draft,
        user_feedback=user_feedback,
        conversation_context=conversation_context,
    )

    return post
